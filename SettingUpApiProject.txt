Insert new project/Asp.net Application/Empty/WebApi/Unit Test/Not hosted onAzure.
---------------------------------Set up AutoFacDI---------------------------------
Install AutoFac.WebAPI2 nuget package
Under App_Start folder create type AutofacConfig that will creater the builder, 
register all custom types of the application, register all controllers, then 
build the continer and its dependency resolver and finally set the resolver as
the webapi dependency resolver.
Register the AutofacConfig in Gloabal.Asax under App_Start.
----------------------------------Set up Entity Framework--------------------------
Added a class library Itsi.Template.Data;
Added a unit test project Itsi.Template.Data.Tests;
Installed the latest version of Entity Framework 6.3 on both the project.
In the data project, added a new Entity folder under which all the entities will reside.
Will use Fluent Api. So Every entity class will have its corresponding 
EntityTypeConfiguration.
Created the TemplateContext. All EntityTypeConfiguration of all the entities must be added.
The template context will have only one constructor that will accept the connection string.
In the Api WebConfig add connection strings.
Since the Template context does not have the default parameterless constructor,
Migrations will be an issue. You will get the error 
"The target context is not constructible. Add a default constructor or provide an 
implementation of IDbContextFactory." To overcome this error, Add a new class MigrationContextFactory,
implement the IDbContextFactory and pass the connection string.
In the TemplateContext, set automatic migration.
Now from Package Manager Console Add the first migration
"Add-Migration -StartUpProjectName Itsi.Template.Api InitialCreate". Use Itsi.Template.Data
as the default project.
Update-database 
In the unit test project,add data and run the unit test.
Using Server Explore connect to the (localdb)\v11.0 and choose the 
Itsi.template database.
----------------------------------Wire Api to Data---------------------------------
Decided not to use the repository pattern as often shown on msdn sites for developing 
WebApi, because it just does not make sense. EF already provide unit of work and
repository out of the box. DbContext is the unit of work and each dbset is the repository.
So decided to use the DTO and service pattern. Reason For DTO abstraction:
1) Tailor it for the clients.
2) Hide properties that client should never see.
3) Flatten the object model.
4) Avoid under posting where a clinet do not send all the data.
5) Avoid over positing where a client sends most of the data.
6) Decouple the api layer from the data layer.
Make Sure you annotate the DTO model so that simple validation can be performed
on the model in the controller itself.
For Simple Validation, espically for the post and the put, I created a ModelValidateAttribute 
class, added that to the filter in WebConfig.cs and then decorate every post and 
put methods with ValidateModel attribute. What this will do is, before the controller post
or put method is invoked, it will validate the model. If the model is invalid,
it will thow BadRequest and will tell the client which field is invalid. 
Reason for the Service abstraction:
1) It is the business logic layer.
2) It is where we will apply all business logic.
3) Decouple the api layer from the data layer.
4) Mapping from the entity to dto will happen here.
5) Do not recommend Auto Mapping, because manual mapping gives the most performance.
6) Implement IDisposable and dispose the context object. (Not sure how Autofac's container will react to this.)
Added Json Formatting config (JsonFormatterConfig.cs) to send the response in camelCase as well as transorm
date format in UTC.
When you run the app, you will not see any conent page on the browser, as I have decided not to return a view.
Use Advanced Res.
The Api is restful.
----------------------------------Set up Identification----------------------------





Useful links:
http://blog.iteedee.com/2014/03/asp-net-identity-2-0-cookie-token-authentication/
https://github.com/tjoudeh/AspNetIdentity.WebApi
http://stackoverflow.com/questions/21519226/example-of-using-asp-net-identity-2-0-usermanagerfactory-with-useoauthbearertoke
http://stackoverflow.com/questions/19528496/bearer-token-authentication-with-asp-net-api?rq=1
http://stackoverflow.com/questions/21102252/how-are-bearer-tokens-stored-server-side-in-web-api-2
http://blogs.msdn.com/b/webdev/archive/2013/09/20/understanding-security-features-in-spa-template.aspx
​http://www.saifikram.com/2014/06/token-based-authentication-using-asp-net-web-api-2-with-owin
​http://bitoftech.net/2014/06/01/token-based-authentication-asp-net-web-api-2-owin-asp-net-identity/
https://bitbucket.org/david.antaramian/so-21662778-spa-authentication-example/overview
http://eliot-jones.com/2014/10/asp-identity-2-0
http://odetocode.com/blogs/scott/archive/2014/01/20/implementing-asp-net-identity.aspx
http://www.codeproject.com/Articles/864725/ASP-NET-Understanding-OWIN-Katana-and-the-Middlewa
Basics:
https://auth0.com/blog/2014/01/07/angularjs-authentication-with-cookies-vs-token/
https://auth0.com/blog/2014/01/15/auth-with-socket-io/

----------------------------------Set up Dapper------------------------------------

----------------------------------Enable CORS--------------------------------------
